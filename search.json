[
  {
    "objectID": "sup.html",
    "href": "sup.html",
    "title": "Chemical Space Analysis",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 1000\nlibrary(shiny)\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(data.table)\n\n######### Data Preparation #########\n# data_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Rise/refs/heads/main/data/merged_figure1.csv\"\ndata_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Rise/refs/heads/main/data/merged_figureSup.csv\"\n\ndf &lt;- fread(data_url) %&gt;% \n  mutate(Country = as.factor(Country), source = as.factor(source)) \n\n######### Custom Labels #########\nfigure_labels &lt;- list(\n  \"FigureS-1\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-b\" = list(y_title = \"Collaboration Index\", map_title = \"International Collaborations\"),\n  \"Figure1-c\" = list(y_title = \"Collaboration Percentage\", map_title = \"China-US Collaboration\"),\n  \"Figure1-d\" = list(y_title = \"GDP Growth Rate (%)\", map_title = \"Economic Indicators\"),\n  \"Figure1-e\" = list(y_title = \"Researchers (Count)\", map_title = \"R&D Workforce\")\n)\n\n######### APP #########\nui &lt;- fluidPage(\n  theme = bs_theme(bootswatch = \"flatly\", primary = \"#2c3e50\", secondary = \"#18bc9c\"),\n  \n  # Navbar\n  div(\n    class = \"navbar navbar-static-top primary bg-primary\",\n    div(\"China's rise in the chemical space and the decline of US influence\", \n        class = \"container-fluid\")\n  ),\n  \n  # Control Panel\n  card(\n    card_header(\"Controls\", class = \"bg-primary text-light\"),\n    card_body(\n      selectInput(\"facet\", \"Select figure:\",\n                  choices = levels(df$source),\n                  selected = \"FigureS-1\",\n                  width = \"100%\"),\n      \n      sliderInput(\"year\", \"Year\",\n                  min = min(df$Year),\n                  max = max(df$Year) - 1,\n                  value = min(df$Year),\n                  step = 1,\n                  animate = animationOptions(interval = 500, loop = FALSE),\n                  width = \"100%\"),\n      \n      uiOutput(\"figure_description\")\n    )\n  ),\n  \n  # Visualization Panel\n  card(\n    full_screen = TRUE,\n    card_header(\"Interactive Visualizations\", class = \"bg-primary text-light\"),\n    card_body(\n      plotlyOutput(\"emissionsPlot\", height = \"50vh\"),\n      br(),\n      plotlyOutput(\"worldMap\", height = \"40vh\")\n    )\n  ),\n  \n  # Footer\n  div(\n    class = \"footer navbar navbar-static-bottom bg-light\",\n    style = \"margin-bottom: 20px;\",\n    div(\n      class = \"container-fluid\",\n      \"Data source: Bermudez-Montana, Garcia-Chung, et al, 2025 - \",\n      a(\"ChemRxiv Publication\", href = \"https://doi.org/10.26434/chemrxiv-2025-d2zc8\",\n        style = \"color: #18bc9c;\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  ######### Reactive Values #########\n  # Initialize all countries as selected by default\n  selected_countries &lt;- reactiveVal(levels(df$Country))\n  \n  ######### Observers #########\n  \n  # Update selected countries when facet changes\n  observeEvent(input$facet, {\n    countries &lt;- df[source == input$facet, unique(Country)]\n    selected_countries(countries)\n  }, ignoreNULL = FALSE)\n  \n  # Handle plotly legend clicks for emissionsPlot\n  observeEvent(event_data(\"plotly_legendclick\", source = \"emissions\"), {\n    click &lt;- event_data(\"plotly_legendclick\", source = \"emissions\")\n    current &lt;- selected_countries()\n    \n    if (!is.null(click$name)) {\n      if (click$name %in% current) {\n        updated &lt;- setdiff(current, click$name)\n      } else {\n        updated &lt;- c(current, click$name)\n      }\n      # Update the reactive selected_countries\n      selected_countries(updated)\n    }\n  })\n  \n  # Reactive axis labels\n  axis_labels &lt;- reactive({\n    figure_labels[[input$facet]] %||% list(y_title = \"Value\", map_title = \"Value\")\n  })\n  \n  # Filtered data based on selected countries and facet\n  filtered_data &lt;- reactive({\n    req(input$facet, selected_countries())\n    df[source == input$facet & Country %in% selected_countries()]\n  })\n  \n  ######### UI Outputs #########\n  \n  # Figure description\n  output$figure_description &lt;- renderUI({\n    desc_text &lt;- switch(input$facet,\n      \"FigureS-1\" = \"Country participation in chemical space growth using formula:\",\n      \"Figure1-b\" = \"Top international collaborations in chemical research:\",\n      \"Figure1-c\" = \"China-US collaborative contributions to new substances:\",\n      \"Figure1-d\" = \"Economic indicators and major events timeline:\",\n      \"Figure1-e\" = \"Research workforce development metrics:\",\n      paste(\"Displaying:\", input$facet)\n    )\n    \n    div(class = \"callout\",\n        h5(desc_text),\n        if(input$facet == \"FigureS-1\") withMathJax(helpText(\"$$C_{i,t} = \\\\frac{1}{n_t} \\\\sum_s \\\\frac{n_{i,s,t}}{n_{a,s,t}}$$\"))\n    )\n  })\n  \n  ######### Emissions Plot #########\n  \n  output$emissionsPlot &lt;- renderPlotly({\n    req(filtered_data(), input$year)\n    \n    plot_data &lt;- filtered_data()[Year &lt;= input$year]\n    if (nrow(plot_data) == 0) return(plotly_empty())\n    \n    # Create the line plot\n    fig &lt;- plot_ly(\n      plot_data, \n      x = ~Year, \n      y = ~Value, \n      color = ~Country,\n      colors = \"Set1\",\n      type = 'scatter', \n      mode = 'lines+markers', \n      line = list(width = 2),\n      hoverinfo = 'text',\n      text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                     axis_labels()$y_title, \": \", round(Value, 2),\n                     \"&lt;br&gt;Year: \", Year),\n      source = \"emissions\",\n      showlegend = TRUE\n    ) \n    \n    # Add annotations with country names at the end of each line\n    final_data &lt;- plot_data %&gt;% \n      group_by(Country) %&gt;% \n      filter(Year == max(Year)) %&gt;% \n      ungroup()\n    \n    for(i in 1:nrow(final_data)) {\n      fig &lt;- fig %&gt;% add_annotations(\n        x = final_data$Year[i],\n        y = final_data$Value[i],\n        text = final_data$Country[i],\n        xref = \"x\",\n        yref = \"y\",\n        xanchor = 'left',\n        yanchor = 'middle',\n        showarrow = FALSE,\n        font = list(size = 12, color = 'black'),\n        xshift = 10\n      )\n    }\n    \n    fig &lt;- fig %&gt;% layout(\n      title = paste(\"Temporal Analysis -\", input$facet),\n      xaxis = list(title = \"Year\", gridcolor = \"#ecf0f1\"),\n      yaxis = list(title = axis_labels()$y_title, gridcolor = \"#ecf0f1\"),\n      hovermode = \"closest\",\n      plot_bgcolor = \"#ffffff\",\n      legend = list(orientation = 'h', y = -0.2, itemclick = \"toggle\", itemdoubleclick = FALSE),\n      margin = list(r = 40)\n    ) \n    \n    if (input$facet == \"Figure1-d\") {\n      fig &lt;- fig %&gt;% \n        add_annotations(x = 2020, y = 10, text = \"COVID-19\", showarrow = FALSE) %&gt;%\n        add_annotations(x = 2007, y = 15, text = \"Global Financial Crisis\", showarrow = FALSE)\n    }\n    \n    return(fig)\n  })\n  \n  ######### World Map #########\n  \n  output$worldMap &lt;- renderPlotly({\n    req(filtered_data(), input$year)\n    \n    map_data &lt;- filtered_data()[Year == input$year]\n    if (nrow(map_data) == 0) return(plotly_empty())\n    \n    plot_geo(map_data, height = 300) %&gt;%\n      add_trace(\n        z = ~Value,\n        color = ~Value,\n        colors = \"Blues\",\n        locations = ~iso3c,\n        text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                      axis_labels()$map_title, \": \", round(Value, 2)),\n        hoverinfo = \"text\",\n        marker = list(line = list(color = \"white\", width = 0.5)),\n        source = \"map\"\n      ) %&gt;%\n      colorbar(title = axis_labels()$map_title, \n               orientation = 'h', y = -0.1) %&gt;%\n      layout(\n        title = paste(\"Global Distribution -\", input$facet, \"(\", input$year, \")\"),\n        geo = list(\n          showframe = FALSE,\n          showcoastlines = TRUE,\n          projection = list(type = \"natural earth\"),\n          bgcolor = \"rgba(0,0,0,0)\",\n          landcolor = \"#f8f9fa\"\n        ),\n        margin = list(b = 80)\n      )\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "China-Chemical-Dominance.html",
    "href": "China-Chemical-Dominance.html",
    "title": "Chemical Space Analysis",
    "section": "",
    "text": "Cartogram of 1996-2022\n\n\n\n\n\n\n\n\n\nCartogram of 1996\n\n\n\n\n\n\n\nCartogram of 2010\n\n\n\n\n\n\n\nCartogram of 2022\n\n\n\n\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 1000\nlibrary(shiny)\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(data.table)\n\n######### Data Preparation #########\n# data_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Rise/refs/heads/main/data/merged_figure1.csv\"\ndata_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Dominance/refs/heads/main/data/fig_1_complete.csv\"\n\ndf &lt;- fread(data_url) %&gt;% \n  mutate(Country = as.factor(Country), source = as.factor(source))\n\n######### Custom Labels #########\nfigure_labels &lt;- list(\n  \"Figure1-a\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure12-a_b\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-b\" = list(y_title = \"Collaboration Index\", map_title = \"International Collaborations\"),\n  \"Figure1-c\" = list(y_title = \"Collaboration Percentage\", map_title = \"China-US Collaboration\"),\n  \"Figure1-d\" = list(y_title = \"GDP Growth Rate (%)\", map_title = \"Economic Indicators\"),\n  \"Figure1-e\" = list(y_title = \"Researchers (Count)\", map_title = \"R&D Workforce\")\n)\n\n######### APP #########\nui &lt;- fluidPage(\n  theme = bs_theme(bootswatch = \"flatly\", primary = \"#2c3e50\", secondary = \"#18bc9c\"),\n  \n  # Navbar\n  div(\n    class = \"navbar navbar-static-top primary bg-primary\",\n    div(\"China's rise in the chemical space and the decline of US influence\", \n        class = \"container-fluid\")\n  ),\n  \n  # Control Panel\n  card(\n    card_header(\"Controls\", class = \"bg-primary text-light\"),\n    card_body(\n      selectInput(\"facet\", \"Select figure:\",\n                  choices = levels(df$source),\n                  selected = \"Figure1-a\",\n                  width = \"100%\"),\n      \n      sliderInput(\"year\", \"Year\",\n                  min = min(df$Year),\n                  max = max(df$Year) - 1,\n                  value = min(df$Year),\n                  step = 1,\n                  animate = animationOptions(interval = 500, loop = FALSE),\n                  width = \"100%\"),\n      \n      uiOutput(\"figure_description\")\n    )\n  ),\n  \n  # Visualization Panel\n  card(\n    full_screen = TRUE,\n    card_header(\"Interactive Visualizations\", class = \"bg-primary text-light\"),\n    card_body(\n      plotlyOutput(\"emissionsPlot\", height = \"50vh\"),\n      br(),\n      plotlyOutput(\"worldMap\", height = \"40vh\")\n    )\n  ),\n  \n  # Footer\n  div(\n    class = \"footer navbar navbar-static-bottom bg-light\",\n    style = \"margin-bottom: 20px;\",\n    div(\n      class = \"container-fluid\",\n      \"Data source: Bermudez-Montana, Garcia-Chung, et al, 2025 - \",\n      a(\"ChemRxiv Publication\", href = \"https://doi.org/10.26434/chemrxiv-2025-d2zc8\",\n        style = \"color: #18bc9c;\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  ######### Reactive Values #########\n  # Initialize all countries as selected by default\n  selected_countries &lt;- reactiveVal(levels(df$Country))\n  \n  ######### Observers #########\n  \n  # Update selected countries when facet changes\n  observeEvent(input$facet, {\n    countries &lt;- df[source == input$facet, unique(Country)]\n    selected_countries(countries)\n  }, ignoreNULL = FALSE)\n  \n  # Handle plotly legend clicks for emissionsPlot\n  observeEvent(event_data(\"plotly_legendclick\", source = \"emissions\"), {\n    click &lt;- event_data(\"plotly_legendclick\", source = \"emissions\")\n    current &lt;- selected_countries()\n    \n    if (!is.null(click$name)) {\n      if (click$name %in% current) {\n        updated &lt;- setdiff(current, click$name)\n      } else {\n        updated &lt;- c(current, click$name)\n      }\n      # Update the reactive selected_countries\n      selected_countries(updated)\n    }\n  })\n  \n  # Reactive axis labels\n  axis_labels &lt;- reactive({\n    figure_labels[[input$facet]] %||% list(y_title = \"Value\", map_title = \"Value\")\n  })\n  \n  # Filtered data based on selected countries and facet\n  filtered_data &lt;- reactive({\n    req(input$facet, selected_countries())\n    df[source == input$facet & Country %in% selected_countries()]\n  })\n  \n  ######### UI Outputs #########\n  \n  # Figure description\n  output$figure_description &lt;- renderUI({\n    desc_text &lt;- switch(input$facet,\n      \"Figure1-a\" = \"Country participation in chemical space growth using formula:\",\n      \"Figure12-a_b\" = \"Country participation in chemical space growth using formula:\",\n      \"Figure1-b\" = \"Top international collaborations in chemical research:\",\n      \"Figure1-c\" = \"China-US collaborative contributions to new substances:\",\n      \"Figure1-d\" = \"Economic indicators and major events timeline:\",\n      \"Figure1-e\" = \"Research workforce development metrics:\",\n      paste(\"Displaying:\", input$facet)\n    )\n    \n    div(class = \"callout\",\n        h5(desc_text),\n        if(input$facet == \"Figure1-a\") withMathJax(helpText(\"$$C_{i,t} = \\\\frac{1}{n_t} \\\\sum_s \\\\frac{n_{i,s,t}}{n_{a,s,t}}$$\"))\n    )\n  })\n  \n  ######### Emissions Plot #########\n  \n  output$emissionsPlot &lt;- renderPlotly({\n    req(filtered_data(), input$year)\n    \n    plot_data &lt;- filtered_data()[Year &lt;= input$year]\n    if (nrow(plot_data) == 0) return(plotly_empty())\n    \n    # Create the line plot\n    fig &lt;- plot_ly(\n      plot_data, \n      x = ~Year, \n      y = ~Value, \n      color = ~Country,\n      colors = \"Set1\",\n      type = 'scatter', \n      mode = 'lines+markers', \n      line = list(width = 2),\n      hoverinfo = 'text',\n      text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                     axis_labels()$y_title, \": \", round(Value, 2),\n                     \"&lt;br&gt;Year: \", Year),\n      source = \"emissions\",\n      showlegend = TRUE\n    ) \n    \n    # Add annotations with country names at the end of each line\n    # final_data &lt;- plot_data %&gt;% \n    #   group_by(Country) %&gt;% \n    #   filter(Year == max(Year)) %&gt;% \n    #   ungroup()\n    \n    # for(i in 1:nrow(final_data)) {\n    #   fig &lt;- fig %&gt;% add_annotations(\n    #     x = final_data$Year[i],\n    #     y = final_data$Value[i],\n    #     text = final_data$Country[i],\n    #     xref = \"x\",\n    #     yref = \"y\",\n    #     xanchor = 'left',\n    #     yanchor = 'middle',\n    #     showarrow = FALSE,\n    #     font = list(size = 12, color = 'black'),\n    #     xshift = 10\n    #   )\n    # }\n    \n    fig &lt;- fig %&gt;% layout(\n      title = paste(\"Temporal Analysis -\", input$facet),\n      xaxis = list(title = \"Year\", gridcolor = \"#ecf0f1\"),\n      yaxis = list(title = axis_labels()$y_title, gridcolor = \"#ecf0f1\"),\n      hovermode = \"closest\",\n      plot_bgcolor = \"#ffffff\",\n      legend = list(orientation = 'h', y = -0.2, itemclick = \"toggle\", itemdoubleclick = FALSE),\n      margin = list(r = 40)\n    ) \n    \n    if (input$facet == \"Figure1-d\") {\n      fig &lt;- fig %&gt;% \n        add_annotations(x = 2020, y = 10, text = \"COVID-19\", showarrow = FALSE) %&gt;%\n        add_annotations(x = 2007, y = 15, text = \"Global Financial Crisis\", showarrow = FALSE)\n    }\n    \n    return(fig)\n  })\n  \n  ######### World Map #########\n  \n  output$worldMap &lt;- renderPlotly({\n    req(filtered_data(), input$year)\n    \n    map_data &lt;- filtered_data()[Year == input$year]\n    if (nrow(map_data) == 0) return(plotly_empty())\n    \n    plot_geo(map_data, height = 300) %&gt;%\n      add_trace(\n        z = ~Value,\n        color = ~Value,\n        colors = \"Blues\",\n        locations = ~iso3c,\n        text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                      axis_labels()$map_title, \": \", round(Value, 2)),\n        hoverinfo = \"text\",\n        marker = list(line = list(color = \"white\", width = 0.5)),\n        source = \"map\"\n      ) %&gt;%\n      colorbar(title = axis_labels()$map_title, \n               orientation = 'h', y = -0.1) %&gt;%\n      layout(\n        title = paste(\"Global Distribution -\", input$facet, \"(\", input$year, \")\"),\n        geo = list(\n          showframe = FALSE,\n          showcoastlines = TRUE,\n          projection = list(type = \"natural earth\"),\n          bgcolor = \"rgba(0,0,0,0)\",\n          landcolor = \"#f8f9fa\"\n        ),\n        margin = list(b = 80)\n      )\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "China-Chemical-Dominance.html#chemical-space-evolution-analysis",
    "href": "China-Chemical-Dominance.html#chemical-space-evolution-analysis",
    "title": "Chemical Space Analysis",
    "section": "",
    "text": "Cartogram of 1996-2022\n\n\n\n\n\n\n\n\n\nCartogram of 1996\n\n\n\n\n\n\n\nCartogram of 2010\n\n\n\n\n\n\n\nCartogram of 2022\n\n\n\n\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 1000\nlibrary(shiny)\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(data.table)\n\n######### Data Preparation #########\n# data_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Rise/refs/heads/main/data/merged_figure1.csv\"\ndata_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Dominance/refs/heads/main/data/fig_1_complete.csv\"\n\ndf &lt;- fread(data_url) %&gt;% \n  mutate(Country = as.factor(Country), source = as.factor(source))\n\n######### Custom Labels #########\nfigure_labels &lt;- list(\n  \"Figure1-a\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure12-a_b\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-b\" = list(y_title = \"Collaboration Index\", map_title = \"International Collaborations\"),\n  \"Figure1-c\" = list(y_title = \"Collaboration Percentage\", map_title = \"China-US Collaboration\"),\n  \"Figure1-d\" = list(y_title = \"GDP Growth Rate (%)\", map_title = \"Economic Indicators\"),\n  \"Figure1-e\" = list(y_title = \"Researchers (Count)\", map_title = \"R&D Workforce\")\n)\n\n######### APP #########\nui &lt;- fluidPage(\n  theme = bs_theme(bootswatch = \"flatly\", primary = \"#2c3e50\", secondary = \"#18bc9c\"),\n  \n  # Navbar\n  div(\n    class = \"navbar navbar-static-top primary bg-primary\",\n    div(\"China's rise in the chemical space and the decline of US influence\", \n        class = \"container-fluid\")\n  ),\n  \n  # Control Panel\n  card(\n    card_header(\"Controls\", class = \"bg-primary text-light\"),\n    card_body(\n      selectInput(\"facet\", \"Select figure:\",\n                  choices = levels(df$source),\n                  selected = \"Figure1-a\",\n                  width = \"100%\"),\n      \n      sliderInput(\"year\", \"Year\",\n                  min = min(df$Year),\n                  max = max(df$Year) - 1,\n                  value = min(df$Year),\n                  step = 1,\n                  animate = animationOptions(interval = 500, loop = FALSE),\n                  width = \"100%\"),\n      \n      uiOutput(\"figure_description\")\n    )\n  ),\n  \n  # Visualization Panel\n  card(\n    full_screen = TRUE,\n    card_header(\"Interactive Visualizations\", class = \"bg-primary text-light\"),\n    card_body(\n      plotlyOutput(\"emissionsPlot\", height = \"50vh\"),\n      br(),\n      plotlyOutput(\"worldMap\", height = \"40vh\")\n    )\n  ),\n  \n  # Footer\n  div(\n    class = \"footer navbar navbar-static-bottom bg-light\",\n    style = \"margin-bottom: 20px;\",\n    div(\n      class = \"container-fluid\",\n      \"Data source: Bermudez-Montana, Garcia-Chung, et al, 2025 - \",\n      a(\"ChemRxiv Publication\", href = \"https://doi.org/10.26434/chemrxiv-2025-d2zc8\",\n        style = \"color: #18bc9c;\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  ######### Reactive Values #########\n  # Initialize all countries as selected by default\n  selected_countries &lt;- reactiveVal(levels(df$Country))\n  \n  ######### Observers #########\n  \n  # Update selected countries when facet changes\n  observeEvent(input$facet, {\n    countries &lt;- df[source == input$facet, unique(Country)]\n    selected_countries(countries)\n  }, ignoreNULL = FALSE)\n  \n  # Handle plotly legend clicks for emissionsPlot\n  observeEvent(event_data(\"plotly_legendclick\", source = \"emissions\"), {\n    click &lt;- event_data(\"plotly_legendclick\", source = \"emissions\")\n    current &lt;- selected_countries()\n    \n    if (!is.null(click$name)) {\n      if (click$name %in% current) {\n        updated &lt;- setdiff(current, click$name)\n      } else {\n        updated &lt;- c(current, click$name)\n      }\n      # Update the reactive selected_countries\n      selected_countries(updated)\n    }\n  })\n  \n  # Reactive axis labels\n  axis_labels &lt;- reactive({\n    figure_labels[[input$facet]] %||% list(y_title = \"Value\", map_title = \"Value\")\n  })\n  \n  # Filtered data based on selected countries and facet\n  filtered_data &lt;- reactive({\n    req(input$facet, selected_countries())\n    df[source == input$facet & Country %in% selected_countries()]\n  })\n  \n  ######### UI Outputs #########\n  \n  # Figure description\n  output$figure_description &lt;- renderUI({\n    desc_text &lt;- switch(input$facet,\n      \"Figure1-a\" = \"Country participation in chemical space growth using formula:\",\n      \"Figure12-a_b\" = \"Country participation in chemical space growth using formula:\",\n      \"Figure1-b\" = \"Top international collaborations in chemical research:\",\n      \"Figure1-c\" = \"China-US collaborative contributions to new substances:\",\n      \"Figure1-d\" = \"Economic indicators and major events timeline:\",\n      \"Figure1-e\" = \"Research workforce development metrics:\",\n      paste(\"Displaying:\", input$facet)\n    )\n    \n    div(class = \"callout\",\n        h5(desc_text),\n        if(input$facet == \"Figure1-a\") withMathJax(helpText(\"$$C_{i,t} = \\\\frac{1}{n_t} \\\\sum_s \\\\frac{n_{i,s,t}}{n_{a,s,t}}$$\"))\n    )\n  })\n  \n  ######### Emissions Plot #########\n  \n  output$emissionsPlot &lt;- renderPlotly({\n    req(filtered_data(), input$year)\n    \n    plot_data &lt;- filtered_data()[Year &lt;= input$year]\n    if (nrow(plot_data) == 0) return(plotly_empty())\n    \n    # Create the line plot\n    fig &lt;- plot_ly(\n      plot_data, \n      x = ~Year, \n      y = ~Value, \n      color = ~Country,\n      colors = \"Set1\",\n      type = 'scatter', \n      mode = 'lines+markers', \n      line = list(width = 2),\n      hoverinfo = 'text',\n      text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                     axis_labels()$y_title, \": \", round(Value, 2),\n                     \"&lt;br&gt;Year: \", Year),\n      source = \"emissions\",\n      showlegend = TRUE\n    ) \n    \n    # Add annotations with country names at the end of each line\n    # final_data &lt;- plot_data %&gt;% \n    #   group_by(Country) %&gt;% \n    #   filter(Year == max(Year)) %&gt;% \n    #   ungroup()\n    \n    # for(i in 1:nrow(final_data)) {\n    #   fig &lt;- fig %&gt;% add_annotations(\n    #     x = final_data$Year[i],\n    #     y = final_data$Value[i],\n    #     text = final_data$Country[i],\n    #     xref = \"x\",\n    #     yref = \"y\",\n    #     xanchor = 'left',\n    #     yanchor = 'middle',\n    #     showarrow = FALSE,\n    #     font = list(size = 12, color = 'black'),\n    #     xshift = 10\n    #   )\n    # }\n    \n    fig &lt;- fig %&gt;% layout(\n      title = paste(\"Temporal Analysis -\", input$facet),\n      xaxis = list(title = \"Year\", gridcolor = \"#ecf0f1\"),\n      yaxis = list(title = axis_labels()$y_title, gridcolor = \"#ecf0f1\"),\n      hovermode = \"closest\",\n      plot_bgcolor = \"#ffffff\",\n      legend = list(orientation = 'h', y = -0.2, itemclick = \"toggle\", itemdoubleclick = FALSE),\n      margin = list(r = 40)\n    ) \n    \n    if (input$facet == \"Figure1-d\") {\n      fig &lt;- fig %&gt;% \n        add_annotations(x = 2020, y = 10, text = \"COVID-19\", showarrow = FALSE) %&gt;%\n        add_annotations(x = 2007, y = 15, text = \"Global Financial Crisis\", showarrow = FALSE)\n    }\n    \n    return(fig)\n  })\n  \n  ######### World Map #########\n  \n  output$worldMap &lt;- renderPlotly({\n    req(filtered_data(), input$year)\n    \n    map_data &lt;- filtered_data()[Year == input$year]\n    if (nrow(map_data) == 0) return(plotly_empty())\n    \n    plot_geo(map_data, height = 300) %&gt;%\n      add_trace(\n        z = ~Value,\n        color = ~Value,\n        colors = \"Blues\",\n        locations = ~iso3c,\n        text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                      axis_labels()$map_title, \": \", round(Value, 2)),\n        hoverinfo = \"text\",\n        marker = list(line = list(color = \"white\", width = 0.5)),\n        source = \"map\"\n      ) %&gt;%\n      colorbar(title = axis_labels()$map_title, \n               orientation = 'h', y = -0.1) %&gt;%\n      layout(\n        title = paste(\"Global Distribution -\", input$facet, \"(\", input$year, \")\"),\n        geo = list(\n          showframe = FALSE,\n          showcoastlines = TRUE,\n          projection = list(type = \"natural earth\"),\n          bgcolor = \"rgba(0,0,0,0)\",\n          landcolor = \"#f8f9fa\"\n        ),\n        margin = list(b = 80)\n      )\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "China-Chemical-Dominance.html#chemical-space-analysis",
    "href": "China-Chemical-Dominance.html#chemical-space-analysis",
    "title": "Chemical Space Analysis",
    "section": "Chemical Space Analysis",
    "text": "Chemical Space Analysis\n\\[\nC_{i,t} = \\frac{1}{n_t} \\sum_s \\frac{n_{i,s,t}}{n_{a,s,t}}\n\\]\nDescription of Elements:\n\n\\(Ci,tCi,t\\): Contribution of country ii to the chemical space (CS) expansion in year tt.\n\\(ntnt\\): Total number of new reported chemicals in year tt.\n\\(ss\\): Index representing a specific chemical substance.\n\\(ni,s,tni,s,t\\): Number of authors from country ii who published substance ss for the first time in year tt.\n\\(na,s,tna,s,t\\): Total number of authors participating in the publication of substance ss in year tt.\n\n\n\n\n\n\n\nNote\n\n\n\nThis formula calculates the weighted contribution of a country to the discovery of new chemical substances. The contribution is proportional to the number of authors from a specific country relative to the total number of authors involved in reporting each substance. Finally, this contribution is normalized by the total number of new substances for that year."
  },
  {
    "objectID": "figure2.html",
    "href": "figure2.html",
    "title": "Figure 2",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 1000\nlibrary(shiny)\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(data.table)\n\n######### Data Preparation #########\n# data_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Rise/refs/heads/main/data/merged_figure1.csv\"\ndata_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Rise/refs/heads/main/data/merged_figure2.csv\"\n\ndf &lt;- fread(data_url) %&gt;% \n  mutate(Country = as.factor(Country), source = as.factor(source)) \n\n######### Custom Labels #########\nfigure_labels &lt;- list(\n  \"Figure1-a\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-b\" = list(y_title = \"Collaboration Index\", map_title = \"International Collaborations\"),\n  \"Figure1-c\" = list(y_title = \"Collaboration Percentage\", map_title = \"China-US Collaboration\"),\n  \"Figure1-d\" = list(y_title = \"GDP Growth Rate (%)\", map_title = \"Economic Indicators\"),\n  \"Figure1-e\" = list(y_title = \"Researchers (Count)\", map_title = \"R&D Workforce\")\n)\n\n######### APP #########\nui &lt;- fluidPage(\n  theme = bs_theme(bootswatch = \"flatly\", primary = \"#2c3e50\", secondary = \"#18bc9c\"),\n  \n  # Navbar\n  div(\n    class = \"navbar navbar-static-top primary bg-primary\",\n    div(\"China's rise in the chemical space and the decline of US influence\", \n        class = \"container-fluid\")\n  ),\n  \n  # Control Panel\n  card(\n    card_header(\"Controls\", class = \"bg-primary text-light\"),\n    card_body(\n      selectInput(\"facet\", \"Select figure:\",\n                  choices = levels(df$source),\n                  selected = \"Figure1-a\",\n                  width = \"100%\"),\n      \n      sliderInput(\"year\", \"Year\",\n                  min = min(df$Year),\n                  max = max(df$Year) - 1,\n                  value = min(df$Year),\n                  step = 1,\n                  animate = animationOptions(interval = 500, loop = FALSE),\n                  width = \"100%\"),\n      \n      uiOutput(\"figure_description\")\n    )\n  ),\n  \n  # Visualization Panel\n  card(\n    full_screen = TRUE,\n    card_header(\"Interactive Visualizations\", class = \"bg-primary text-light\"),\n    card_body(\n      plotlyOutput(\"emissionsPlot\", height = \"50vh\"),\n      br(),\n      plotlyOutput(\"worldMap\", height = \"40vh\")\n    )\n  ),\n  \n  # Footer\n  div(\n    class = \"footer navbar navbar-static-bottom bg-light\",\n    style = \"margin-bottom: 20px;\",\n    div(\n      class = \"container-fluid\",\n      \"Data source: Bermudez-Montana, Garcia-Chung, et al, 2025 - \",\n      a(\"ChemRxiv Publication\", href = \"https://doi.org/10.26434/chemrxiv-2025-d2zc8\",\n        style = \"color: #18bc9c;\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  ######### Reactive Values #########\n  # Initialize all countries as selected by default\n  selected_countries &lt;- reactiveVal(levels(df$Country))\n  \n  ######### Observers #########\n  \n  # Update selected countries when facet changes\n  observeEvent(input$facet, {\n    countries &lt;- df[source == input$facet, unique(Country)]\n    selected_countries(countries)\n  }, ignoreNULL = FALSE)\n  \n  # Handle plotly legend clicks for emissionsPlot\n  observeEvent(event_data(\"plotly_legendclick\", source = \"emissions\"), {\n    click &lt;- event_data(\"plotly_legendclick\", source = \"emissions\")\n    current &lt;- selected_countries()\n    \n    if (!is.null(click$name)) {\n      if (click$name %in% current) {\n        updated &lt;- setdiff(current, click$name)\n      } else {\n        updated &lt;- c(current, click$name)\n      }\n      # Update the reactive selected_countries\n      selected_countries(updated)\n    }\n  })\n  \n  # Reactive axis labels\n  axis_labels &lt;- reactive({\n    figure_labels[[input$facet]] %||% list(y_title = \"Value\", map_title = \"Value\")\n  })\n  \n  # Filtered data based on selected countries and facet\n  filtered_data &lt;- reactive({\n    req(input$facet, selected_countries())\n    df[source == input$facet & Country %in% selected_countries()]\n  })\n  \n  ######### UI Outputs #########\n  \n  # Figure description\n  output$figure_description &lt;- renderUI({\n    desc_text &lt;- switch(input$facet,\n      \"Figure1-a\" = \"Country participation in chemical space growth using formula:\",\n      \"Figure1-b\" = \"Top international collaborations in chemical research:\",\n      \"Figure1-c\" = \"China-US collaborative contributions to new substances:\",\n      \"Figure1-d\" = \"Economic indicators and major events timeline:\",\n      \"Figure1-e\" = \"Research workforce development metrics:\",\n      paste(\"Displaying:\", input$facet)\n    )\n    \n    div(class = \"callout\",\n        h5(desc_text),\n        if(input$facet == \"Figure1-a\") withMathJax(helpText(\"$$C_{i,t} = \\\\frac{1}{n_t} \\\\sum_s \\\\frac{n_{i,s,t}}{n_{a,s,t}}$$\"))\n    )\n  })\n  \n  ######### Emissions Plot #########\n  \n  output$emissionsPlot &lt;- renderPlotly({\n    req(filtered_data(), input$year)\n    \n    plot_data &lt;- filtered_data()[Year &lt;= input$year]\n    if (nrow(plot_data) == 0) return(plotly_empty())\n    \n    # Create the line plot\n    fig &lt;- plot_ly(\n      plot_data, \n      x = ~Year, \n      y = ~Value, \n      color = ~Country,\n      colors = \"Set1\",\n      type = 'scatter', \n      mode = 'lines+markers', \n      line = list(width = 2),\n      hoverinfo = 'text',\n      text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                     axis_labels()$y_title, \": \", round(Value, 2),\n                     \"&lt;br&gt;Year: \", Year),\n      source = \"emissions\",\n      showlegend = TRUE\n    ) \n    \n    # Add annotations with country names at the end of each line\n    final_data &lt;- plot_data %&gt;% \n      group_by(Country) %&gt;% \n      filter(Year == max(Year)) %&gt;% \n      ungroup()\n    \n    for(i in 1:nrow(final_data)) {\n      fig &lt;- fig %&gt;% add_annotations(\n        x = final_data$Year[i],\n        y = final_data$Value[i],\n        text = final_data$Country[i],\n        xref = \"x\",\n        yref = \"y\",\n        xanchor = 'left',\n        yanchor = 'middle',\n        showarrow = FALSE,\n        font = list(size = 12, color = 'black'),\n        xshift = 10\n      )\n    }\n    \n    fig &lt;- fig %&gt;% layout(\n      title = paste(\"Temporal Analysis -\", input$facet),\n      xaxis = list(title = \"Year\", gridcolor = \"#ecf0f1\"),\n      yaxis = list(title = axis_labels()$y_title, gridcolor = \"#ecf0f1\"),\n      hovermode = \"closest\",\n      plot_bgcolor = \"#ffffff\",\n      legend = list(orientation = 'h', y = -0.2, itemclick = \"toggle\", itemdoubleclick = FALSE),\n      margin = list(r = 40)\n    ) \n    \n    if (input$facet == \"Figure1-d\") {\n      fig &lt;- fig %&gt;% \n        add_annotations(x = 2020, y = 10, text = \"COVID-19\", showarrow = FALSE) %&gt;%\n        add_annotations(x = 2007, y = 15, text = \"Global Financial Crisis\", showarrow = FALSE)\n    }\n    \n    return(fig)\n  })\n  \n  ######### World Map #########\n  \n  output$worldMap &lt;- renderPlotly({\n    req(filtered_data(), input$year)\n    \n    map_data &lt;- filtered_data()[Year == input$year]\n    if (nrow(map_data) == 0) return(plotly_empty())\n    \n    plot_geo(map_data, height = 300) %&gt;%\n      add_trace(\n        z = ~Value,\n        color = ~Value,\n        colors = \"Blues\",\n        locations = ~iso3c,\n        text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                      axis_labels()$map_title, \": \", round(Value, 2)),\n        hoverinfo = \"text\",\n        marker = list(line = list(color = \"white\", width = 0.5)),\n        source = \"map\"\n      ) %&gt;%\n      colorbar(title = axis_labels()$map_title, \n               orientation = 'h', y = -0.1) %&gt;%\n      layout(\n        title = paste(\"Global Distribution -\", input$facet, \"(\", input$year, \")\"),\n        geo = list(\n          showframe = FALSE,\n          showcoastlines = TRUE,\n          projection = list(type = \"natural earth\"),\n          bgcolor = \"rgba(0,0,0,0)\",\n          landcolor = \"#f8f9fa\"\n        ),\n        margin = list(b = 80)\n      )\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "figure2.html#chemical-space-evolution-analysis",
    "href": "figure2.html#chemical-space-evolution-analysis",
    "title": "Figure 2",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 1000\nlibrary(shiny)\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(data.table)\n\n######### Data Preparation #########\n# data_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Rise/refs/heads/main/data/merged_figure1.csv\"\ndata_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Rise/refs/heads/main/data/merged_figure2.csv\"\n\ndf &lt;- fread(data_url) %&gt;% \n  mutate(Country = as.factor(Country), source = as.factor(source)) \n\n######### Custom Labels #########\nfigure_labels &lt;- list(\n  \"Figure1-a\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-b\" = list(y_title = \"Collaboration Index\", map_title = \"International Collaborations\"),\n  \"Figure1-c\" = list(y_title = \"Collaboration Percentage\", map_title = \"China-US Collaboration\"),\n  \"Figure1-d\" = list(y_title = \"GDP Growth Rate (%)\", map_title = \"Economic Indicators\"),\n  \"Figure1-e\" = list(y_title = \"Researchers (Count)\", map_title = \"R&D Workforce\")\n)\n\n######### APP #########\nui &lt;- fluidPage(\n  theme = bs_theme(bootswatch = \"flatly\", primary = \"#2c3e50\", secondary = \"#18bc9c\"),\n  \n  # Navbar\n  div(\n    class = \"navbar navbar-static-top primary bg-primary\",\n    div(\"China's rise in the chemical space and the decline of US influence\", \n        class = \"container-fluid\")\n  ),\n  \n  # Control Panel\n  card(\n    card_header(\"Controls\", class = \"bg-primary text-light\"),\n    card_body(\n      selectInput(\"facet\", \"Select figure:\",\n                  choices = levels(df$source),\n                  selected = \"Figure1-a\",\n                  width = \"100%\"),\n      \n      sliderInput(\"year\", \"Year\",\n                  min = min(df$Year),\n                  max = max(df$Year) - 1,\n                  value = min(df$Year),\n                  step = 1,\n                  animate = animationOptions(interval = 500, loop = FALSE),\n                  width = \"100%\"),\n      \n      uiOutput(\"figure_description\")\n    )\n  ),\n  \n  # Visualization Panel\n  card(\n    full_screen = TRUE,\n    card_header(\"Interactive Visualizations\", class = \"bg-primary text-light\"),\n    card_body(\n      plotlyOutput(\"emissionsPlot\", height = \"50vh\"),\n      br(),\n      plotlyOutput(\"worldMap\", height = \"40vh\")\n    )\n  ),\n  \n  # Footer\n  div(\n    class = \"footer navbar navbar-static-bottom bg-light\",\n    style = \"margin-bottom: 20px;\",\n    div(\n      class = \"container-fluid\",\n      \"Data source: Bermudez-Montana, Garcia-Chung, et al, 2025 - \",\n      a(\"ChemRxiv Publication\", href = \"https://doi.org/10.26434/chemrxiv-2025-d2zc8\",\n        style = \"color: #18bc9c;\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  ######### Reactive Values #########\n  # Initialize all countries as selected by default\n  selected_countries &lt;- reactiveVal(levels(df$Country))\n  \n  ######### Observers #########\n  \n  # Update selected countries when facet changes\n  observeEvent(input$facet, {\n    countries &lt;- df[source == input$facet, unique(Country)]\n    selected_countries(countries)\n  }, ignoreNULL = FALSE)\n  \n  # Handle plotly legend clicks for emissionsPlot\n  observeEvent(event_data(\"plotly_legendclick\", source = \"emissions\"), {\n    click &lt;- event_data(\"plotly_legendclick\", source = \"emissions\")\n    current &lt;- selected_countries()\n    \n    if (!is.null(click$name)) {\n      if (click$name %in% current) {\n        updated &lt;- setdiff(current, click$name)\n      } else {\n        updated &lt;- c(current, click$name)\n      }\n      # Update the reactive selected_countries\n      selected_countries(updated)\n    }\n  })\n  \n  # Reactive axis labels\n  axis_labels &lt;- reactive({\n    figure_labels[[input$facet]] %||% list(y_title = \"Value\", map_title = \"Value\")\n  })\n  \n  # Filtered data based on selected countries and facet\n  filtered_data &lt;- reactive({\n    req(input$facet, selected_countries())\n    df[source == input$facet & Country %in% selected_countries()]\n  })\n  \n  ######### UI Outputs #########\n  \n  # Figure description\n  output$figure_description &lt;- renderUI({\n    desc_text &lt;- switch(input$facet,\n      \"Figure1-a\" = \"Country participation in chemical space growth using formula:\",\n      \"Figure1-b\" = \"Top international collaborations in chemical research:\",\n      \"Figure1-c\" = \"China-US collaborative contributions to new substances:\",\n      \"Figure1-d\" = \"Economic indicators and major events timeline:\",\n      \"Figure1-e\" = \"Research workforce development metrics:\",\n      paste(\"Displaying:\", input$facet)\n    )\n    \n    div(class = \"callout\",\n        h5(desc_text),\n        if(input$facet == \"Figure1-a\") withMathJax(helpText(\"$$C_{i,t} = \\\\frac{1}{n_t} \\\\sum_s \\\\frac{n_{i,s,t}}{n_{a,s,t}}$$\"))\n    )\n  })\n  \n  ######### Emissions Plot #########\n  \n  output$emissionsPlot &lt;- renderPlotly({\n    req(filtered_data(), input$year)\n    \n    plot_data &lt;- filtered_data()[Year &lt;= input$year]\n    if (nrow(plot_data) == 0) return(plotly_empty())\n    \n    # Create the line plot\n    fig &lt;- plot_ly(\n      plot_data, \n      x = ~Year, \n      y = ~Value, \n      color = ~Country,\n      colors = \"Set1\",\n      type = 'scatter', \n      mode = 'lines+markers', \n      line = list(width = 2),\n      hoverinfo = 'text',\n      text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                     axis_labels()$y_title, \": \", round(Value, 2),\n                     \"&lt;br&gt;Year: \", Year),\n      source = \"emissions\",\n      showlegend = TRUE\n    ) \n    \n    # Add annotations with country names at the end of each line\n    final_data &lt;- plot_data %&gt;% \n      group_by(Country) %&gt;% \n      filter(Year == max(Year)) %&gt;% \n      ungroup()\n    \n    for(i in 1:nrow(final_data)) {\n      fig &lt;- fig %&gt;% add_annotations(\n        x = final_data$Year[i],\n        y = final_data$Value[i],\n        text = final_data$Country[i],\n        xref = \"x\",\n        yref = \"y\",\n        xanchor = 'left',\n        yanchor = 'middle',\n        showarrow = FALSE,\n        font = list(size = 12, color = 'black'),\n        xshift = 10\n      )\n    }\n    \n    fig &lt;- fig %&gt;% layout(\n      title = paste(\"Temporal Analysis -\", input$facet),\n      xaxis = list(title = \"Year\", gridcolor = \"#ecf0f1\"),\n      yaxis = list(title = axis_labels()$y_title, gridcolor = \"#ecf0f1\"),\n      hovermode = \"closest\",\n      plot_bgcolor = \"#ffffff\",\n      legend = list(orientation = 'h', y = -0.2, itemclick = \"toggle\", itemdoubleclick = FALSE),\n      margin = list(r = 40)\n    ) \n    \n    if (input$facet == \"Figure1-d\") {\n      fig &lt;- fig %&gt;% \n        add_annotations(x = 2020, y = 10, text = \"COVID-19\", showarrow = FALSE) %&gt;%\n        add_annotations(x = 2007, y = 15, text = \"Global Financial Crisis\", showarrow = FALSE)\n    }\n    \n    return(fig)\n  })\n  \n  ######### World Map #########\n  \n  output$worldMap &lt;- renderPlotly({\n    req(filtered_data(), input$year)\n    \n    map_data &lt;- filtered_data()[Year == input$year]\n    if (nrow(map_data) == 0) return(plotly_empty())\n    \n    plot_geo(map_data, height = 300) %&gt;%\n      add_trace(\n        z = ~Value,\n        color = ~Value,\n        colors = \"Blues\",\n        locations = ~iso3c,\n        text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                      axis_labels()$map_title, \": \", round(Value, 2)),\n        hoverinfo = \"text\",\n        marker = list(line = list(color = \"white\", width = 0.5)),\n        source = \"map\"\n      ) %&gt;%\n      colorbar(title = axis_labels()$map_title, \n               orientation = 'h', y = -0.1) %&gt;%\n      layout(\n        title = paste(\"Global Distribution -\", input$facet, \"(\", input$year, \")\"),\n        geo = list(\n          showframe = FALSE,\n          showcoastlines = TRUE,\n          projection = list(type = \"natural earth\"),\n          bgcolor = \"rgba(0,0,0,0)\",\n          landcolor = \"#f8f9fa\"\n        ),\n        margin = list(b = 80)\n      )\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "figure2.html#chemical-space-analysis",
    "href": "figure2.html#chemical-space-analysis",
    "title": "Figure 2",
    "section": "Chemical Space Analysis",
    "text": "Chemical Space Analysis\n\\[\nC_{i,t} = \\frac{1}{n_t} \\sum_s \\frac{n_{i,s,t}}{n_{a,s,t}}\n\\]\nDescription of Elements:\n\n\\(Ci,tCi,t\\): Contribution of country ii to the chemical space (CS) expansion in year tt.\n\\(ntnt\\): Total number of new reported chemicals in year tt.\n\\(ss\\): Index representing a specific chemical substance.\n\\(ni,s,tni,s,t\\): Number of authors from country ii who published substance ss for the first time in year tt.\n\\(na,s,tna,s,t\\): Total number of authors participating in the publication of substance ss in year tt.\n\n\n\n\n\n\n\nNote\n\n\n\nThis formula calculates the weighted contribution of a country to the discovery of new chemical substances. The contribution is proportional to the number of authors from a specific country relative to the total number of authors involved in reporting each substance. Finally, this contribution is normalized by the total number of new substances for that year."
  }
]